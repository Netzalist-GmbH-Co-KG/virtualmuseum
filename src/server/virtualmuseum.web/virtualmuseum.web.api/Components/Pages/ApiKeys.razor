@page "/ApiKeys"
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
<h3>Api Keys</h3>

@if (!isAdmin)
{
    <div class="rounded-2 alert-danger p-3 mt-5 mb-5" style="border: gray 1px solid;">
        <h4>Access Denied</h4>
        <p>&nbsp;</p>
        <p>Sorry, you are not authorized to access this page.</p>
    </div>
}
else
{
    <div class="rounded-2 alert-light p-3 mt-5 mb-5" style="border: gray 1px solid;">
        <h4>API Keys</h4>
        <p>&nbsp;</p>
        <p>An dieser Stelle können Sie künftig API Keys erstellen.</p>
        <p>API Keys werden benötigt, um den einzelnen Geräten (Quest3) Zugang zu den hier konfigurierten Daten zu erlauben.</p>
    </div>

    <div>
        <h4>User Roles @isAdmin</h4>
        @if (roles != null)
        {
            @foreach (var role in roles)
            {
                <p>@role</p>
            }
        }
        else
        {
            <p>No roles found.</p>
        }
    </div>
}

@code {
    private IEnumerable<string> roles;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            roles = user.Claims
                .Where(c => c.Type == System.Security.Claims.ClaimTypes.Role)
                .Select(c => c.Value);
        }
        
        isAdmin = user.IsInRole("Administrator");
    }
}
name: Build project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environments:
        description: 'Comma-separated list of environments to build (e.g., Default,Wilhelmsburg,TWLocal)'
        required: false
        default: 'Default,Wilhelmsburg'
        type: string

jobs:
  unity-build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Use cache to speed up build
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-          

      - name: Free disk space for Android build
        uses: jlumbroso/free-disk-space@v1.3.1

      # Define environments to build
      - name: Set up environments
        id: environments
        run: |
          # Use input environments if provided, otherwise use default
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.environments }}" ]; then
            ENVS="${{ github.event.inputs.environments }}"
          else
            ENVS="Default,Wilhelmsburg"
          fi
          echo "ENVIRONMENTS=$ENVS" >> $GITHUB_ENV
          echo "Using environments: $ENVS"
      
      # Build for all environments
      - name: Build Unity project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: Android
          projectPath: "src/unity/TimeGlideVR"
          customParameters: "-executeMethod TimeGlideVR.Editor.BuildScript.CommandLineBuild -environments ${{ env.ENVIRONMENTS }}"
          buildName: "TimeGlideVR"

      - name: Archive Android builds
        uses: actions/upload-artifact@v4
        with:
          name: AndroidBuilds
          path: build/Android/**/*apk

      - name: Generate a version number
        id: version
        run: echo "::set-output name=version::$(date +'%Y.%m.%d').${{ github.run_number }}"

      - name: Create a new Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false

      # Upload all environment builds using a script
      - name: Upload Release Assets
        run: |
          # Loop through all environments and upload each build
          IFS=',' read -ra ENVS <<< "$ENVIRONMENTS"
          for env in "${ENVS[@]}"; do
            echo "Uploading build for environment: $env"
            curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/vnd.android.package-archive" \
              --data-binary @"./build/Android/TimeGlideVR_${env}.apk" \
              "${{ steps.create_release.outputs.upload_url }}?name=VirtualMuseum-${env}-${{ steps.version.outputs.version }}.apk&label=VirtualMuseum-${env}-${{ steps.version.outputs.version }}.apk"
          done

      - name: Push tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

  server-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore "src/server/virtualmuseum.web/virtualmuseum.web.api/virtualmuseum.web.api.csproj"
      
      - name: Generate a version number
        id: version
        run: echo "::set-output name=version::$(date +'%Y.%m.%d').${{ github.run_number }}"

      - name: Publish
        run: dotnet publish "src/server/virtualmuseum.web/virtualmuseum.web.api/virtualmuseum.web.api.csproj" -c Release -o /tmp/publish

      - name: Zip published files
        run: zip -r virtualmuseum-${{ steps.version.outputs.version }}.zip /tmp/publish

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ServerBuild-${{ steps.version.outputs.version }}
          path: virtualmuseum-${{ steps.version.outputs.version }}.zip       